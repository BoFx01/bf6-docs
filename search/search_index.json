{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>This site is an unoffcial developer reference for scripting in Battlefield 6 Portal. This project is in the very early stages and most content is not yet written. Please consider contributing to help build out the documentation.</p> <p>The current priority is to document <code>mod</code> and <code>modlib</code> in the <code>API Reference</code> section. This section should explain all of the event handlers, functions, types, and other objects. Working examples should be included when possible.</p> <p>Once API Reference is complete, the next step is to create more user-friendly guides and tutorials.</p>"},{"location":"api/","title":"API Reference","text":"<ul> <li>Event Handlers</li> <li>Functions</li> <li>Types</li> </ul>"},{"location":"api/mod/","title":"mod","text":"<ul> <li>Event Handlers</li> <li>Functions</li> <li>Types</li> </ul>"},{"location":"api/mod/events/","title":"Events","text":"<p>Work in Progress</p> <p>This documentation is a work in progress. Contributions are encouraged. Only pages with a checkmark are complete.</p>"},{"location":"api/mod/events/#functions","title":"Functions","text":""},{"location":"api/mod/events/#game-mode-events","title":"Game Mode Events","text":"<ul> <li> OnGameModeStarted</li> <li> OnGameModeEnding</li> <li> OnTimeLimitReached</li> </ul>"},{"location":"api/mod/events/#player-events","title":"Player Events","text":"<p>Deployment</p> <ul> <li> OnPlayerDeployed</li> <li> OnPlayerUndeploy</li> <li> OnPlayerJoinGame</li> <li> OnPlayerLeaveGame</li> <li> OnPlayerSwitchTeam</li> </ul> <p>Area/Object Interaction</p> <ul> <li> OnPlayerEnterAreaTrigger</li> <li> OnPlayerExitAreaTrigger</li> <li> OnPlayerEnterCapturePoint</li> <li> OnPlayerExitCapturePoint</li> <li> OnPlayerInteract</li> </ul> <p>Combat</p> <ul> <li> OnPlayerDamaged</li> <li> OnPlayerDied</li> <li> OnPlayerEarnedKill</li> <li> OnPlayerEarnedKillAssist</li> <li> OnMandown</li> <li> OnRevived</li> </ul> <p>Vehicle Interaction</p> <ul> <li> OnPlayerEnterVehicle</li> <li> OnPlayerEnterVehicleSeat</li> <li> OnPlayerExitVehicle</li> <li> OnPlayerExitVehicleSeat</li> </ul> <p>Other Player Events</p> <ul> <li> OnPlayerUIButtonEvent</li> <li> OnSpawnerSpawned</li> <li> OnRayCastHit</li> <li> OnRayCastMissed</li> </ul>"},{"location":"api/mod/events/#objective-events","title":"Objective Events","text":"<p>Capture Points</p> <ul> <li> OnCapturePointCaptured</li> <li> OnCapturePointCapturing</li> <li> OnCapturePointLost</li> </ul> <p>MCOM Stations</p> <ul> <li> OnMCOMArmed</li> <li> OnMCOMDefused</li> <li> OnMCOMDestroyed</li> </ul>"},{"location":"api/mod/events/#ai-events","title":"AI Events","text":"<p>Movement</p> <ul> <li> OnAIMoveToFailed</li> <li> OnAIMoveToRunning</li> <li> OnAIMoveToSucceeded</li> </ul> <p>Parachuting</p> <ul> <li> OnAIParachuteRunning</li> <li> OnAIParachuteSucceeded</li> </ul> <p>Waypoint Idle</p> <ul> <li> OnAIWaypointIdleFailed</li> <li> OnAIWaypointIdleRunning</li> <li> OnAIWaypointIdleSucceeded</li> </ul>"},{"location":"api/mod/events/#vehicle-events","title":"Vehicle Events","text":"<ul> <li> OnVehicleDestroyed</li> <li> OnVehicleSpawned</li> </ul>"},{"location":"api/mod/events/#ongoingcontinuous-events","title":"Ongoing/Continuous Events","text":"<p>Warning</p> <p>These are advanced event handlers and are not recommended for beginners.</p> <p>Global &amp; Environmental</p> <ul> <li> OngoingGlobal</li> <li> OngoingAreaTrigger</li> <li> OngoingScreenEffect</li> <li> OngoingWorldIcon</li> </ul> <p>Objective-Related</p> <ul> <li> OngoingCapturePoint</li> <li> OngoingMCOM</li> <li> OngoingSector</li> <li> OngoingInteractPoint</li> </ul> <p>Spawning Systems</p> <ul> <li> OngoingSpawner</li> <li> OngoingSpawnPoint</li> <li> OngoingEmplacementSpawner</li> <li> OngoingVehicleSpawner</li> </ul> <p>Entities</p> <ul> <li> OngoingPlayer</li> <li> OngoingTeam</li> <li> OngoingVehicle</li> <li> OngoingHQ</li> <li> OngoingWaypointPath</li> </ul>"},{"location":"api/mod/events/OnGameModeEnding/","title":"OnGameModeEnding","text":"<p>This function triggers when a game mode is ending. This is helpful for doing server cleanup, handling end-of-match logic, and setting up for the next match.</p>"},{"location":"api/mod/events/OnGameModeEnding/#syntax","title":"Syntax","text":"<pre><code>export async function OnGameModeEnding(): void;\n</code></pre>"},{"location":"api/mod/events/OnGameModeEnding/#example","title":"Example","text":"<pre><code>export async function OnGameModeStarted() {\n  console.log(\"Game mode started\")\n  const areaTrigger = mod.GetAreaTrigger(500);\n  mod.EnableAreaTrigger(areaTrigger, true);\n}\n\nexport async function OnPlayerEnterAreaTrigger(eventPlayer: mod.Player, eventAreaTrigger: mod.AreaTrigger) {\n  if (mod.GetObjId(eventAreaTrigger) == 500) {\n    console.log(\"Ending game mode\");\n    mod.EndGameMode(eventPlayer);\n  }\n}\n\n// Display a message when the match has ended\nexport async function OnGameModeEnding() {\n  console.log(\"Game has ended\");\n  const msg = mod.Message(mod.stringkeys.game_over);\n  mod.DisplayNotificationMessage(msg);\n}\n</code></pre>"},{"location":"api/mod/events/OnGameModeEnding/#see-also","title":"See Also","text":"<ul> <li><code>EndGameMode</code></li> </ul>"},{"location":"api/mod/events/OnGameModeStarted/","title":"OnGameModeStarted","text":"<p>This function triggers at the start of the gamemode. This can be used as the entry point to initialize the game.</p>"},{"location":"api/mod/events/OnGameModeStarted/#syntax","title":"Syntax","text":"<pre><code>export function OnGameModeStarted(): void;\n</code></pre>"},{"location":"api/mod/events/OnGameModeStarted/#example","title":"Example","text":"<pre><code>// Display a message to all players every minute\nexport async function OnGameModeStarted() {\n  while (true) {\n    mod.DisplayNotificationMessage(mod.Message(mod.stringkeys.s1));\n    await mod.Wait(60);\n  }\n}\n</code></pre>"},{"location":"api/mod/events/OnMandown/","title":"OnMandown","text":"<p>This function triggers when a player is forced into the mandown state (incapacitated but not yet dead). This is useful for implementing revive mechanics, tracking incapacitations, and creating special gameplay events. Both this and <code>OnPlayerDied</code> is called at the same time when the player is initially downed.</p>"},{"location":"api/mod/events/OnMandown/#syntax","title":"Syntax","text":"<pre><code>export function OnMandown(eventPlayer: mod.Player, eventOtherPlayer: mod.Player): void;\n</code></pre>"},{"location":"api/mod/events/OnMandown/#parameters","title":"Parameters","text":"Parameter Type Description <code>eventPlayer</code> <code>mod.Player</code> The player who entered the mandown state <code>eventOtherPlayer</code> <code>mod.Player</code> The player who caused the eventPlayer to enter mandown"},{"location":"api/mod/events/OnMandown/#example","title":"Example","text":"Script.tsStrings.json <pre><code>export function OnMandown(eventPlayer: mod.Player, eventOtherPlayer: mod.Player) {\n    const msg = mod.Message(mod.stringkeys.down, eventPlayer);\n    mod.DisplayNotificationMessage(msg);\n}\n</code></pre> <pre><code>{\n  \"down\": \"{} is down and needs assistance!\"\n}\n</code></pre>"},{"location":"api/mod/events/OnMandown/#see-also","title":"See Also","text":"<ul> <li><code>OnPlayerDied</code></li> <li><code>OnPlayerDamaged</code></li> <li><code>ForceRevive</code></li> </ul>"},{"location":"api/mod/events/OnPlayerDamaged/","title":"OnPlayerDamaged","text":"<p>This function triggers when a player takes damage from any source. This is useful for tracking damage events, implementing custom damage logic, or creating damage-based game mechanics. This function is called repeatedly if a player is down and bleeding out.</p>"},{"location":"api/mod/events/OnPlayerDamaged/#syntax","title":"Syntax","text":"<pre><code>export function OnPlayerDamaged(\n    eventPlayer: mod.Player,\n    eventOtherPlayer: mod.Player,\n    eventDamageType: mod.DamageType,\n    eventWeaponUnlock: mod.WeaponUnlock\n): void;\n</code></pre>"},{"location":"api/mod/events/OnPlayerDamaged/#parameters","title":"Parameters","text":"Parameter Type Description <code>eventPlayer</code> <code>mod.Player</code> The player who took damage <code>eventOtherPlayer</code> <code>mod.Player</code> The player who dealt the damage <code>eventDamageType</code> <code>mod.DamageType</code> The type of damage dealt <code>eventWeaponUnlock</code> <code>mod.WeaponUnlock</code> The weapon used to deal the damage"},{"location":"api/mod/events/OnPlayerDamaged/#example","title":"Example","text":"Script.tsStrings.json <pre><code>export function OnPlayerDamaged(\n    eventPlayer: mod.Player,\n    eventOtherPlayer: mod.Player,\n    eventDamageType: mod.DamageType,\n    eventWeaponUnlock: mod.WeaponUnlock\n) {\n\n  const msg = mod.Message(mod.stringkeys.damaged, eventPlayer);\n  mod.DisplayNotificationMessage(msg);\n}\n</code></pre> <pre><code>{\n  \"damaged\": \"{} is taking damage!\"\n}\n</code></pre>"},{"location":"api/mod/events/OnPlayerDamaged/#see-also","title":"See Also","text":"<ul> <li><code>OnPlayerDied</code></li> <li><code>OnMandown</code></li> <li><code>DealDamage</code></li> <li><code>Heal</code></li> </ul>"},{"location":"api/mod/events/OnPlayerDeployed/","title":"OnPlayerDeployed","text":"<p>This function triggers when a player has been deployed into the game world. This event occurs after a player spawns and is useful for initializing player-specific settings, granting items, or setting up player states at the start of their deployment.</p>"},{"location":"api/mod/events/OnPlayerDeployed/#syntax","title":"Syntax","text":"<pre><code>export function OnPlayerDeployed(eventPlayer: mod.Player): void;\n</code></pre>"},{"location":"api/mod/events/OnPlayerDeployed/#parameters","title":"Parameters","text":"Parameter Type Description eventPlayer mod.Player The player who has been deployed into the game world"},{"location":"api/mod/events/OnPlayerDeployed/#example","title":"Example","text":"Script.tsStrings.json <pre><code>// Give players a welcome message and starting equipment when they deploy\nexport async function OnPlayerDeployed(eventPlayer: mod.Player) {\n  // Display welcome message\n  const welcomeMsg = mod.Message(mod.stringkeys.welcome_player, eventPlayer);\n  mod.DisplayNotificationMessage(welcomeMsg, eventPlayer);\n}\n</code></pre> <pre><code>{\n  \"welcome_player\": \"Welcome, {}!\"\n}\n</code></pre>"},{"location":"api/mod/events/OnPlayerDeployed/#see-also","title":"See Also","text":"<ul> <li><code>OnPlayerUndeploy</code></li> </ul>"},{"location":"api/mod/events/OnPlayerDied/","title":"OnPlayerDied","text":"<p>This function triggers whenever a player dies. This is essential for implementing respawn logic, tracking kills and deaths, and handling post-death game mechanics. This function is called when a player is initially downed and is waiting to be revived.</p>"},{"location":"api/mod/events/OnPlayerDied/#syntax","title":"Syntax","text":"<pre><code>export function OnPlayerDied(\n    eventPlayer: mod.Player,\n    eventOtherPlayer: mod.Player,\n    eventDeathType: mod.DeathType,\n    eventWeaponUnlock: mod.WeaponUnlock\n): void;\n</code></pre>"},{"location":"api/mod/events/OnPlayerDied/#parameters","title":"Parameters","text":"Parameter Type Description <code>eventPlayer</code> <code>mod.Player</code> The player who died <code>eventOtherPlayer</code> <code>mod.Player</code> The player who killed the eventPlayer <code>eventDeathType</code> <code>mod.DeathType</code> The type of death that occurred <code>eventWeaponUnlock</code> <code>mod.WeaponUnlock</code> The weapon used to kill the player"},{"location":"api/mod/events/OnPlayerDied/#example","title":"Example","text":"Script.tsStrings.json <pre><code>export function OnPlayerDied(\n    eventPlayer: mod.Player,\n    eventOtherPlayer: mod.Player,\n    eventDeathType: mod.DeathType,\n    eventWeaponUnlock: mod.WeaponUnlock\n) {\n    // Display a kill notification\n    const msg = mod.Message(mod.stringkeys.died, eventOtherPlayer, eventPlayer);\n    mod.DisplayNotificationMessage(msg);\n}\n</code></pre> <pre><code>{\n  \"died\": \"{} killed {}!\"\n}\n</code></pre>"},{"location":"api/mod/events/OnPlayerDied/#see-also","title":"See Also","text":"<ul> <li><code>OnPlayerDamaged</code></li> <li><code>OnMandown</code></li> <li><code>ForceRevive</code></li> <li><code>OnPlayerDeployed</code></li> </ul>"},{"location":"api/mod/events/OnPlayerEnterAreaTrigger/","title":"OnPlayerEnterAreaTrigger","text":"<p>Triggers when a player enters an <code>AreaTrigger</code>.</p>"},{"location":"api/mod/events/OnPlayerEnterAreaTrigger/#syntax","title":"Syntax","text":"<pre><code>export function OnPlayerEnterAreaTrigger(eventPlayer: mod.Player, eventAreaTrigger: mod.AreaTrigger): void;\n</code></pre>"},{"location":"api/mod/events/OnPlayerEnterAreaTrigger/#parameters","title":"Parameters","text":"Parameter Type Description <code>eventPlayer</code> <code>Player</code> The player who entered the area trigger <code>eventAreaTrigger</code> <code>AreaTrigger</code> The area trigger that was entered"},{"location":"api/mod/events/OnPlayerEnterAreaTrigger/#example","title":"Example","text":"<p>script.ts <pre><code>// Enable the area trigger when the game starts\nexport async function OnGameModeStarted() {\n  console.log(\"Game mode started\")\n  const areaTrigger = mod.GetAreaTrigger(500);\n  mod.EnableAreaTrigger(areaTrigger, true);\n}\n\n// Publish a message\nexport async function OnPlayerEnterAreaTrigger(eventPlayer: mod.Player, eventAreaTrigger: mod.AreaTrigger) {\n  const msg = mod.Message(mod.stringkeys.s0);\n  mod.DisplayNotificationMessage(msg);\n}\n</code></pre></p> <p>strings.json <pre><code>{\n  \"s0\": \"A player entered an area trigger\"\n}\n</code></pre></p>"},{"location":"api/mod/events/OnPlayerEnterCapturePoint/","title":"OnPlayerEnterCapturePoint","text":"<p>This function triggers when a player enters a CapturePoint capturing area. This is useful for implementing game logic such as starting capture timers, displaying UI notifications, or tracking which players are contesting a point.</p>"},{"location":"api/mod/events/OnPlayerEnterCapturePoint/#syntax","title":"Syntax","text":"<pre><code>export function OnPlayerEnterCapturePoint(eventPlayer: mod.Player, eventCapturePoint: mod.CapturePoint): void;\n</code></pre>"},{"location":"api/mod/events/OnPlayerEnterCapturePoint/#parameters","title":"Parameters","text":"Parameter Type Description <code>eventPlayer</code> <code>mod.Player</code> The player who entered the capture point area <code>eventCapturePoint</code> <code>mod.CapturePoint</code> The capture point that was entered"},{"location":"api/mod/events/OnPlayerEnterCapturePoint/#example","title":"Example","text":"Script.tsStrings.json <pre><code>export function OnPlayerEnterCapturePoint(eventPlayer: mod.Player, eventCapturePoint: mod.CapturePoint) {\n  // Display notification to all players\n  const msg = mod.Message(mod.stringkeys.capture_enter, eventPlayer);\n  mod.DisplayNotificationMessage(msg);\n}\n\nexport function OnPlayerExitCapturePoint(eventPlayer: mod.Player, eventCapturePoint: mod.CapturePoint) {\n  // Display notification to all players\n  const msg = mod.Message(mod.stringkeys.capture_exit, eventPlayer);\n  mod.DisplayNotificationMessage(msg);\n}\n</code></pre> <pre><code>{\n  \"capture_enter\": \"{} entered the capture point.\",\n  \"capture_exit\": \"{} exited the capture point.\"\n}\n</code></pre>"},{"location":"api/mod/events/OnPlayerEnterCapturePoint/#see-also","title":"See Also","text":"<ul> <li><code>OnPlayerExitCapturePoint</code></li> <li><code>OnPlayerEnterAreaTrigger</code></li> <li><code>CapturePoint</code></li> </ul>"},{"location":"api/mod/events/OnPlayerEnterVehicle/","title":"OnPlayerEnterVehicle","text":"<p>This function triggers when a player enters any seat in a vehicle. Use this event to handle vehicle entry logic, apply vehicle-specific effects to players, or track vehicle usage.</p>"},{"location":"api/mod/events/OnPlayerEnterVehicle/#syntax","title":"Syntax","text":"<pre><code>export function OnPlayerEnterVehicle(eventPlayer: mod.Player, eventVehicle: mod.Vehicle): void;\n</code></pre>"},{"location":"api/mod/events/OnPlayerEnterVehicle/#parameters","title":"Parameters","text":"Parameter Type Description <code>eventPlayer</code> <code>mod.Player</code> The player who entered the vehicle <code>eventVehicle</code> <code>mod.Vehicle</code> The vehicle that was entered"},{"location":"api/mod/events/OnPlayerEnterVehicle/#example","title":"Example","text":"Script.tsStrings.json <pre><code>export function OnPlayerEnterVehicle(eventPlayer: mod.Player, eventVehicle: mod.Vehicle) {\n  const msg = mod.Message(mod.stringkeys.veh_enter, eventPlayer);\n  mod.DisplayNotificationMessage(msg, eventPlayer);\n\n  const vehicleId = mod.GetObjId(eventVehicle);\n  console.log(`Vehicle ID: ${vehicleId}`);\n}\n</code></pre> <pre><code>{\n  \"veh_enter\": \"{} entered a vehicle.\"\n}\n</code></pre>"},{"location":"api/mod/events/OnPlayerEnterVehicle/#see-also","title":"See Also","text":"<ul> <li><code>OnPlayerEnterVehicleSeat</code> - Triggers when a player enters a specific vehicle seat</li> <li><code>OnPlayerExitVehicle</code> - Triggers when a player exits a vehicle</li> <li><code>OnPlayerExitVehicleSeat</code> - Triggers when a player exits a specific vehicle seat</li> </ul>"},{"location":"api/mod/events/OnPlayerEnterVehicleSeat/","title":"OnPlayerEnterVehicleSeat","text":"<p>This function triggers when a player enters a specific seat in a vehicle. This provides more granular control than <code>OnPlayerEnterVehicle</code>, allowing you to differentiate between driver and passenger seats.</p>"},{"location":"api/mod/events/OnPlayerEnterVehicleSeat/#syntax","title":"Syntax","text":"<pre><code>export function OnPlayerEnterVehicleSeat(\n    eventPlayer: mod.Player,\n    eventVehicle: mod.Vehicle,\n    eventSeat: mod.Object\n): void;\n</code></pre>"},{"location":"api/mod/events/OnPlayerEnterVehicleSeat/#parameters","title":"Parameters","text":"Parameter Type Description <code>eventPlayer</code> <code>mod.Player</code> The player who entered the vehicle seat <code>eventVehicle</code> <code>mod.Vehicle</code> The vehicle containing the seat <code>eventSeat</code> <code>mod.Object</code> The specific seat object that was entered"},{"location":"api/mod/events/OnPlayerEnterVehicleSeat/#example","title":"Example","text":"Script.tsStrings.json <pre><code>export function OnPlayerEnterVehicleSeat(\n    eventPlayer: mod.Player,\n    eventVehicle: mod.Vehicle,\n    eventSeat: mod.Object\n) {\n  const seatNum = mod.GetPlayerVehicleSeat(eventPlayer);\n  // Display message stating if player is driver or passenger\n  if (seatNum == 0) {\n    const msg = mod.Message(mod.stringkeys.veh_driver, eventPlayer);\n    mod.DisplayNotificationMessage(msg, eventPlayer);\n  } else {\n    const msg = mod.Message(mod.stringkeys.veh_pax, eventPlayer);\n    mod.DisplayNotificationMessage(msg, eventPlayer);\n  }\n}\n</code></pre> <pre><code>{\n  \"veh_driver\": \"{} is now the driver.\",\n  \"veh_pax\": \"{} is a passenger.\"\n}\n</code></pre>"},{"location":"api/mod/events/OnPlayerEnterVehicleSeat/#see-also","title":"See Also","text":"<ul> <li><code>OnPlayerEnterVehicle</code> - Triggers when a player enters any vehicle seat</li> <li><code>OnPlayerExitVehicle</code> - Triggers when a player exits a vehicle</li> <li><code>OnPlayerExitVehicleSeat</code> - Triggers when a player exits a specific vehicle seat</li> </ul>"},{"location":"api/mod/events/OnPlayerExitAreaTrigger/","title":"OnPlayerEnterAreaTrigger","text":"<p>Triggers when a player exits an <code>AreaTrigger</code>.</p>"},{"location":"api/mod/events/OnPlayerExitAreaTrigger/#syntax","title":"Syntax","text":"<pre><code>export function OnPlayerExitAreaTrigger(eventPlayer: mod.Player, eventAreaTrigger: mod.AreaTrigger): void;\n</code></pre>"},{"location":"api/mod/events/OnPlayerExitAreaTrigger/#parameters","title":"Parameters","text":"Parameter Type Description <code>eventPlayer</code> <code>Player</code> The player who exited the area trigger <code>eventAreaTrigger</code> <code>AreaTrigger</code> The area trigger that was exited"},{"location":"api/mod/events/OnPlayerExitAreaTrigger/#example","title":"Example","text":"<p>script.ts <pre><code>// Enable the area trigger when the game starts\nexport async function OnGameModeStarted() {\n  console.log(\"Game mode started\")\n  const areaTrigger = mod.GetAreaTrigger(500);\n  mod.EnableAreaTrigger(areaTrigger, true);\n}\n\n// Publish a message\nexport async function OnPlayerExitAreaTrigger(eventPlayer: mod.Player, eventAreaTrigger: mod.AreaTrigger) {\n  const msg = mod.Message(mod.stringkeys.s0);\n  mod.DisplayNotificationMessage(msg);\n}\n</code></pre></p> <p>strings.json <pre><code>{\n  \"s0\": \"A player exited an area trigger\"\n}\n</code></pre></p>"},{"location":"api/mod/events/OnPlayerExitCapturePoint/","title":"OnPlayerExitCapturePoint","text":"<p>This function triggers when a player exits a CapturePoint capturing area. This is useful for implementing game logic such as stopping capture timers, updating UI notifications, or handling point contestation rules.</p>"},{"location":"api/mod/events/OnPlayerExitCapturePoint/#syntax","title":"Syntax","text":"<pre><code>export function OnPlayerExitCapturePoint(eventPlayer: mod.Player, eventCapturePoint: mod.CapturePoint): void;\n</code></pre>"},{"location":"api/mod/events/OnPlayerExitCapturePoint/#parameters","title":"Parameters","text":"Parameter Type Description <code>eventPlayer</code> <code>mod.Player</code> The player who exited the capture point area <code>eventCapturePoint</code> <code>mod.CapturePoint</code> The capture point that was exited"},{"location":"api/mod/events/OnPlayerExitCapturePoint/#example","title":"Example","text":"Script.tsStrings.json <pre><code>export function OnPlayerEnterCapturePoint(eventPlayer: mod.Player, eventCapturePoint: mod.CapturePoint) {\n  // Display notification to all players\n  const msg = mod.Message(mod.stringkeys.capture_enter, eventPlayer);\n  mod.DisplayNotificationMessage(msg);\n}\n\nexport function OnPlayerExitCapturePoint(eventPlayer: mod.Player, eventCapturePoint: mod.CapturePoint) {\n  // Display notification to all players\n  const msg = mod.Message(mod.stringkeys.capture_exit, eventPlayer);\n  mod.DisplayNotificationMessage(msg);\n}\n</code></pre> <pre><code>{\n  \"capture_enter\": \"{} entered the capture point.\",\n  \"capture_exit\": \"{} exited the capture point.\"\n}\n</code></pre>"},{"location":"api/mod/events/OnPlayerExitCapturePoint/#see-also","title":"See Also","text":"<ul> <li><code>OnPlayerEnterCapturePoint</code></li> <li><code>OnPlayerExitAreaTrigger</code></li> <li><code>CapturePoint</code></li> </ul>"},{"location":"api/mod/events/OnPlayerExitVehicle/","title":"OnPlayerExitVehicle","text":"<p>This function triggers when a player exits a vehicle. Use this event to handle post-vehicle logic, remove vehicle-specific effects, or track when players leave vehicles.</p>"},{"location":"api/mod/events/OnPlayerExitVehicle/#syntax","title":"Syntax","text":"<pre><code>export function OnPlayerExitVehicle(eventPlayer: mod.Player, eventVehicle: mod.Vehicle): void;\n</code></pre>"},{"location":"api/mod/events/OnPlayerExitVehicle/#parameters","title":"Parameters","text":"Parameter Type Description <code>eventPlayer</code> <code>mod.Player</code> The player who exited the vehicle <code>eventVehicle</code> <code>mod.Vehicle</code> The vehicle that was exited"},{"location":"api/mod/events/OnPlayerExitVehicle/#example","title":"Example","text":"Script.tsStrings.json <pre><code>export function OnPlayerExitVehicle(eventPlayer: mod.Player, eventVehicle: mod.Vehicle) {\n  const msg = mod.Message(mod.stringkeys.veh_exit, eventPlayer);\n  mod.DisplayNotificationMessage(msg, eventPlayer);\n\n  const vehicleId = mod.GetObjId(eventVehicle);\n  console.log(`Player exited vehicle ID: ${vehicleId}`);\n}\n</code></pre> <pre><code>{\n  \"veh_exit\": \"{} exited a vehicle.\"\n}\n</code></pre>"},{"location":"api/mod/events/OnPlayerExitVehicle/#see-also","title":"See Also","text":"<ul> <li><code>OnPlayerEnterVehicle</code> - Triggers when a player enters a vehicle</li> <li><code>OnPlayerEnterVehicleSeat</code> - Triggers when a player enters a specific vehicle seat</li> <li><code>OnPlayerExitVehicleSeat</code> - Triggers when a player exits a specific vehicle seat</li> </ul>"},{"location":"api/mod/events/OnPlayerExitVehicleSeat/","title":"OnPlayerExitVehicleSeat","text":"<p>This function triggers when a player exits a specific seat in a vehicle. This provides detailed information about which seat the player left, useful for seat-specific logic.</p>"},{"location":"api/mod/events/OnPlayerExitVehicleSeat/#syntax","title":"Syntax","text":"<pre><code>export function OnPlayerExitVehicleSeat(\n    eventPlayer: mod.Player,\n    eventVehicle: mod.Vehicle,\n    eventSeat: mod.Object\n): void;\n</code></pre>"},{"location":"api/mod/events/OnPlayerExitVehicleSeat/#parameters","title":"Parameters","text":"Parameter Type Description <code>eventPlayer</code> <code>mod.Player</code> The player who exited the vehicle seat <code>eventVehicle</code> <code>mod.Vehicle</code> The vehicle containing the seat <code>eventSeat</code> <code>mod.Object</code> The specific seat object that was exited"},{"location":"api/mod/events/OnPlayerExitVehicleSeat/#see-also","title":"See Also","text":"<ul> <li><code>OnPlayerEnterVehicle</code> - Triggers when a player enters a vehicle</li> <li><code>OnPlayerEnterVehicleSeat</code> - Triggers when a player enters a specific vehicle seat</li> <li><code>OnPlayerExitVehicle</code> - Triggers when a player exits a vehicle</li> </ul>"},{"location":"api/mod/events/OnPlayerJoinGame/","title":"OnPlayerJoinGame","text":"<p>This function triggers when a player joins the game. This is useful for initializing player-specific data, sending welcome messages, or setting up initial game state for new players.</p>"},{"location":"api/mod/events/OnPlayerJoinGame/#syntax","title":"Syntax","text":"<pre><code>export function OnPlayerJoinGame(eventPlayer: mod.Player): void;\n</code></pre>"},{"location":"api/mod/events/OnPlayerJoinGame/#parameters","title":"Parameters","text":"Parameter Type Description <code>eventPlayer</code> <code>mod.Player</code> The player who joined the game"},{"location":"api/mod/events/OnPlayerJoinGame/#example","title":"Example","text":"Script.tsStrings.json <pre><code>export async function OnPlayerJoinGame(eventPlayer: mod.Player) {\n  console.log(\"Player joined the game\");\n\n  // Wait to make sure the player has loaded.\n  await mod.Wait(10);\n\n  // Display a welcome message to the joining player\n  const welcomeMsg = mod.Message(mod.stringkeys.welcome);\n  mod.DisplayNotificationMessage(welcomeMsg, eventPlayer);\n}\n</code></pre> <pre><code>{\n  \"welcome\": \"Welcome to the server!\"\n}\n</code></pre>"},{"location":"api/mod/events/OnPlayerJoinGame/#see-also","title":"See Also","text":"<ul> <li><code>OnPlayerLeaveGame</code></li> <li><code>OnPlayerSwitchTeam</code></li> </ul>"},{"location":"api/mod/events/OnPlayerLeaveGame/","title":"OnPlayerLeaveGame","text":"<p>This function triggers when any player leaves the game. Note that this callback receives a player number rather than a Player object, as the player has already disconnected.</p>"},{"location":"api/mod/events/OnPlayerLeaveGame/#syntax","title":"Syntax","text":"<pre><code>export function OnPlayerLeaveGame(eventNumber: number): void;\n</code></pre>"},{"location":"api/mod/events/OnPlayerLeaveGame/#parameters","title":"Parameters","text":"Parameter Type Description <code>eventNumber</code> <code>number</code> The number/ID of the player who left the game"},{"location":"api/mod/events/OnPlayerLeaveGame/#example","title":"Example","text":"Script.tsStrings.json <pre><code>export function OnPlayerLeaveGame(eventNumber: number) {\n  console.log(`Player ${eventNumber} has left the game`);\n\n  // Clean up any player-specific data\n  // Note: Player object is no longer available, only the player number\n\n  // Display a message to remaining players\n  const leaveMsg = mod.Message(mod.stringkeys.goodbye);\n  mod.DisplayNotificationMessage(leaveMsg);\n}\n</code></pre> <pre><code>{\n  \"goodbye\": \"A player disconnected.\"\n}\n</code></pre>"},{"location":"api/mod/events/OnPlayerLeaveGame/#see-also","title":"See Also","text":"<ul> <li><code>OnPlayerJoinGame</code></li> </ul>"},{"location":"api/mod/events/OnPlayerUndeploy/","title":"OnPlayerUndeploy","text":"<p>This function triggers when a player undeploys from a game. This is useful for handling cleanup logic, tracking player state changes, or applying effects when a player transitions out of a deployed position.</p>"},{"location":"api/mod/events/OnPlayerUndeploy/#syntax","title":"Syntax","text":"<pre><code>export function OnPlayerUndeploy(eventPlayer: mod.Player): void;\n</code></pre>"},{"location":"api/mod/events/OnPlayerUndeploy/#parameters","title":"Parameters","text":"Parameter Type Description eventPlayer mod.Player The player who is undeploying"},{"location":"api/mod/events/OnPlayerUndeploy/#example","title":"Example","text":"Script.tsStrings.json <pre><code>// Track how long players stay deployed\nconst deploymentTimes = new Map&lt;number, number&gt;();\n\nexport async function OnPlayerDeployed(eventPlayer: mod.Player) {\n  const playerId = mod.GetObjId(eventPlayer);\n  deploymentTimes.set(playerId, Date.now());\n  console.log(`Player ${playerId} deployed`);\n}\n\n// Show the player how long they were deployed\nexport async function OnPlayerUndeploy(eventPlayer: mod.Player) {\n  const playerId = mod.GetObjId(eventPlayer);\n  const deployTime = deploymentTimes.get(playerId);\n\n  if (deployTime) {\n    const duration = (Date.now() - deployTime) / 1000;\n    console.log(`Player ${playerId} was deployed for ${duration} seconds`);\n    const deployMsg = mod.Message(mod.stringkeys.deploy_time, duration);\n    mod.DisplayNotificationMessage(deployMsg, eventPlayer);\n    deploymentTimes.delete(playerId);\n  }\n}\n</code></pre> <pre><code>{\n  \"deploy_time\": \"You were deployed for {} seconds.\"\n}\n</code></pre>"},{"location":"api/mod/events/OnPlayerUndeploy/#see-also","title":"See Also","text":"<ul> <li><code>OnPlayerDeployed</code></li> </ul>"},{"location":"api/mod/events/OngoingAreaTrigger/","title":"OngoingAreaTrigger","text":"<p>The <code>OngoingAreaTrigger</code> function is called continuously for every area trigger that exists in the game. This is an ongoing event that runs repeatedly, allowing you to check conditions and perform actions specific to each individual area trigger.</p> <p>This function is useful for: - Monitoring the state of area triggers - Performing continuous checks on area trigger properties - Implementing custom behavior that needs to evaluate regularly for each area trigger</p>"},{"location":"api/mod/events/OngoingAreaTrigger/#syntax","title":"Syntax","text":"<pre><code>export function OngoingAreaTrigger(eventAreaTrigger: mod.AreaTrigger): void;\n</code></pre>"},{"location":"api/mod/events/OngoingAreaTrigger/#parameters","title":"Parameters","text":"Parameter Type Description <code>eventAreaTrigger</code> <code>mod.AreaTrigger</code> The area trigger entity that this event is currently evaluating for."},{"location":"api/mod/events/OngoingAreaTrigger/#see-also","title":"See Also","text":"<ul> <li>AreaTrigger</li> <li>EnableAreaTrigger</li> <li>GetAreaTrigger</li> <li>OnPlayerEnterAreaTrigger</li> <li>OnPlayerExitAreaTrigger</li> </ul>"},{"location":"api/mod/events/OngoingGlobal/","title":"OngoingGlobal","text":"<p>The <code>OngoingGlobal</code> function is an event handler that is called every tick in the background while the server is active. It operates independently of player actions and is ideal for implementing:</p> <ul> <li>Periodic server-wide notifications or announcements</li> <li>Continuous monitoring of global game state</li> <li>Scheduled events or timed actions</li> <li>Background tasks that need to run throughout the server's lifetime</li> </ul>"},{"location":"api/mod/events/OngoingGlobal/#syntax","title":"Syntax","text":"<pre><code>export function OngoingGlobal(): void;\n</code></pre>"},{"location":"api/mod/events/OngoingTeam/","title":"OngoingTeam","text":"<p>This function executes continuously for the specified team throughout the game mode. It's useful for implementing team-based logic that needs to run repeatedly, such as monitoring team status, applying team-wide effects, or checking team conditions.</p>"},{"location":"api/mod/events/OngoingTeam/#syntax","title":"Syntax","text":"<pre><code>export function OngoingTeam(eventTeam: mod.Team): void;\n</code></pre>"},{"location":"api/mod/events/OngoingTeam/#parameters","title":"Parameters","text":"Parameter Type Description <code>eventTeam</code> <code>mod.Team</code> The team for which the ongoing logic will execute"},{"location":"api/mod/events/OngoingTeam/#see-also","title":"See Also","text":"<ul> <li><code>OngoingPlayer</code></li> <li><code>SetGameModeScore</code></li> <li><code>SetHQTeam</code></li> </ul>"},{"location":"api/mod/functions/","title":"Functions","text":"<p>Work in Progress</p> <p>This documentation is a work in progress. Contributions are encouraged. Only pages with a checkmark are complete.</p>"},{"location":"api/mod/functions/#core-functions","title":"Core Functions","text":""},{"location":"api/mod/functions/#general","title":"General","text":"<ul> <li> Wait</li> <li> SetVariable</li> <li> SetVariableAtIndex</li> <li> GetArgument</li> <li> GetVariable</li> <li> GlobalVariable</li> <li> ObjectVariable</li> </ul>"},{"location":"api/mod/functions/#variables-data-manipulation","title":"Variables &amp; Data Manipulation","text":"<ul> <li> ChaseVariableAtRate</li> <li> ChaseVariableOverTime</li> <li> StopChasingVariable</li> </ul>"},{"location":"api/mod/functions/#ai-functions","title":"AI Functions","text":""},{"location":"api/mod/functions/#ai-behavior","title":"AI Behavior","text":"<ul> <li> AIBattlefieldBehavior</li> <li> AIDefendPositionBehavior</li> <li> AIIdleBehavior</li> <li> AILOSMoveToBehavior</li> <li> AIMoveToBehavior</li> <li> AIParachuteBehavior</li> <li> AIValidatedMoveToBehavior</li> <li> AIWaypointIdleBehavior</li> </ul>"},{"location":"api/mod/functions/#ai-spawning","title":"AI Spawning","text":"<ul> <li> AISetUnspawnOnDead</li> <li> SetUnspawnDelayInSeconds</li> <li> SpawnAIFromAISpawner</li> <li> UnspawnAllAIsFromAISpawner</li> </ul>"},{"location":"api/mod/functions/#ai-combat","title":"AI Combat","text":"<ul> <li> AIEnableShooting</li> <li> AIEnableTargeting</li> <li> AIForceFire</li> <li> AIGadgetSettings</li> <li> AISetFocusPoint</li> <li> AISetTarget</li> <li> AIStartUsingGadget</li> <li> AIStopUsingGadget</li> <li> SetAIToHumanDamageModifier</li> </ul>"},{"location":"api/mod/functions/#ai-movement","title":"AI Movement","text":"<ul> <li> AISetMoveSpeed</li> <li> AISetStance</li> </ul>"},{"location":"api/mod/functions/#audio-functions","title":"Audio Functions","text":""},{"location":"api/mod/functions/#sound-effects","title":"Sound Effects","text":"<ul> <li> EnableSFX</li> <li> PlaySound</li> <li> SetSFXVolume</li> <li> StopSound</li> <li> GetSFX</li> </ul>"},{"location":"api/mod/functions/#voice-over","title":"Voice Over","text":"<ul> <li> PlayVO</li> <li> GetVO</li> </ul>"},{"location":"api/mod/functions/#visual-functions","title":"Visual Functions","text":""},{"location":"api/mod/functions/#camera","title":"Camera","text":"<ul> <li> SetCameraTypeForAll</li> <li> SetCameraTypeForPlayer</li> </ul>"},{"location":"api/mod/functions/#screen-effects","title":"Screen Effects","text":"<ul> <li> EnableScreenEffect</li> <li> GetScreenEffect</li> </ul>"},{"location":"api/mod/functions/#visual-effects-vfx","title":"Visual Effects (VFX)","text":"<ul> <li> EnableVFX</li> <li> MoveVFX</li> <li> SetVFXColor</li> <li> SetVFXScale</li> <li> SetVFXSpeed</li> <li> GetVFX</li> </ul>"},{"location":"api/mod/functions/#spawner-functions","title":"Spawner Functions","text":""},{"location":"api/mod/functions/#emplacement-spawners","title":"Emplacement Spawners","text":"<ul> <li> ForceEmplacementSpawnerSpawn</li> <li> SetEmplacementSpawnerAbandonVehicleOutOfCombatArea</li> <li> SetEmplacementSpawnerApplyDamageToAbandonVehicle</li> <li> SetEmplacementSpawnerAutoSpawn</li> <li> SetEmplacementSpawnerKeepAliveAbandonRadius</li> <li> SetEmplacementSpawnerRespawnTime</li> <li> SetEmplacementSpawnerSpawnerRadius</li> <li> SetEmplacementSpawnerTimeUntilAbandon</li> <li> SetEmplacementSpawnerType</li> <li> GetEmplacementSpawner</li> </ul>"},{"location":"api/mod/functions/#vehicle-spawners","title":"Vehicle Spawners","text":"<ul> <li> ForceVehicleSpawnerSpawn</li> <li> SetVehicleSpawnerAbandonVehiclesOutOfCombatArea</li> <li> SetVehicleSpawnerApplyDamageToAbandonVehicle</li> <li> SetVehicleSpawnerAutoSpawn</li> <li> SetVehicleSpawnerKeepAliveAbandonRadius</li> <li> SetVehicleSpawnerKeepAliveSpawnerRadius</li> <li> SetVehicleSpawnerRespawnTime</li> <li> SetVehicleSpawnerTimeUntilAbandon</li> <li> SetVehicleSpawnerVehicleType</li> <li> GetVehicleSpawner</li> </ul>"},{"location":"api/mod/functions/#general-spawners","title":"General Spawners","text":"<ul> <li> GetSpawner</li> </ul>"},{"location":"api/mod/functions/#player-functions","title":"Player Functions","text":""},{"location":"api/mod/functions/#player-deployment","title":"Player Deployment","text":"<ul> <li> DeployAllPlayers</li> <li> DeployPlayer</li> <li> EnableAllPlayerDeploy</li> <li> EnablePlayerDeploy</li> <li> SetRedeployTime</li> <li> UndeployAllPlayers</li> <li> UndeployPlayer</li> <li> DisablePlayerJoin</li> </ul>"},{"location":"api/mod/functions/#player-spawning","title":"Player Spawning","text":"<ul> <li> SetSpawnMode</li> <li> SpawnPlayerFromSpawnPoint</li> <li> GetSpawnPoint</li> </ul>"},{"location":"api/mod/functions/#player-health-damage","title":"Player Health &amp; Damage","text":"<ul> <li> DealDamage</li> <li> ForceRevive</li> <li> Heal</li> <li> Kill</li> <li> ForceManDown</li> <li> SkipManDown</li> <li> SetPlayerMaxHealth</li> </ul>"},{"location":"api/mod/functions/#player-movement","title":"Player Movement","text":"<ul> <li> Teleport</li> <li> SetPlayerMovementSpeedMultiplier</li> </ul>"},{"location":"api/mod/functions/#player-input","title":"Player Input","text":"<ul> <li> EnableAllInputRestrictions</li> <li> EnableInputRestriction</li> </ul>"},{"location":"api/mod/functions/#player-inventory-equipment","title":"Player Inventory &amp; Equipment","text":"<ul> <li> AddAttachmentToWeaponPackage</li> <li> AddEquipment</li> <li> ForceSwitchInventory</li> <li> RemoveEquipment</li> <li> SetInventoryAmmo</li> <li> SetInventoryMagazineAmmo</li> <li> Resupply</li> <li> CreateNewWeaponPackage</li> <li> GetInventoryAmmo</li> <li> GetInventoryMagazineAmmo</li> <li> HasEquipment</li> <li> IsInventorySlotActive</li> </ul>"},{"location":"api/mod/functions/#player-queries","title":"Player Queries","text":"<ul> <li> AllPlayers</li> <li> ClosestPlayerTo</li> <li> FarthestPlayerFrom</li> <li> GetPlayerDeaths</li> <li> GetPlayerKills</li> <li> GetSoldierState</li> <li> IsPlayerValid</li> <li> EventDamageTypeCompare</li> <li> EventDeathTypeCompare</li> </ul>"},{"location":"api/mod/functions/#player-team-squad","title":"Player Team &amp; Squad","text":"<ul> <li> SetTeam</li> <li> GetSquad</li> <li> GetTeam</li> </ul>"},{"location":"api/mod/functions/#player-spotting","title":"Player Spotting","text":"<ul> <li> SpotTarget</li> </ul>"},{"location":"api/mod/functions/#game-mode-functions","title":"Game Mode Functions","text":""},{"location":"api/mod/functions/#game-mode-control","title":"Game Mode Control","text":"<ul> <li> EndGameMode</li> <li> PauseGameModeTime</li> <li> ResetGameModeTime</li> <li> SetFriendlyFire</li> </ul>"},{"location":"api/mod/functions/#game-mode-scoring","title":"Game Mode Scoring","text":"<ul> <li> SetGameModeScore</li> <li> SetGameModeTargetScore</li> <li> SetGameModeTimeLimit</li> <li> GetGameModeScore</li> <li> GetMatchTimeElapsed</li> <li> GetMatchTimeRemaining</li> <li> GetRoundTime</li> <li> GetTargetScore</li> </ul>"},{"location":"api/mod/functions/#faction-map","title":"Faction &amp; Map","text":"<ul> <li> IsFaction</li> <li> IsCurrentMap</li> </ul>"},{"location":"api/mod/functions/#objective-functions","title":"Objective Functions","text":""},{"location":"api/mod/functions/#capture-points","title":"Capture Points","text":"<ul> <li> EnableCapturePointDeploying</li> <li> SetCapturePointCapturingTime</li> <li> SetCapturePointNeutralizationTime</li> <li> SetCapturePointOwner</li> <li> SetMaxCaptureMultiplier</li> <li> AllCapturePoints</li> <li> GetCapturePoint</li> <li> GetCaptureProgress</li> <li> GetCurrentOwnerTeam</li> <li> GetOwnerProgressTeam</li> <li> GetPlayersOnPoint</li> <li> GetPreviousOwnerTeam</li> </ul>"},{"location":"api/mod/functions/#hq-headquarters","title":"HQ (Headquarters)","text":"<ul> <li> EnableHQ</li> <li> SetHQTeam</li> <li> GetHQ</li> </ul>"},{"location":"api/mod/functions/#mcom","title":"MCOM","text":"<ul> <li> SetMCOMFuseTime</li> <li> GetMCOM</li> </ul>"},{"location":"api/mod/functions/#sector","title":"Sector","text":"<ul> <li> GetSector</li> </ul>"},{"location":"api/mod/functions/#general-objectives","title":"General Objectives","text":"<ul> <li> EnableGameModeObjective</li> </ul>"},{"location":"api/mod/functions/#world-objects","title":"World Objects","text":""},{"location":"api/mod/functions/#area-triggers","title":"Area Triggers","text":"<ul> <li> EnableAreaTrigger</li> <li> GetAreaTrigger</li> </ul>"},{"location":"api/mod/functions/#interact-points","title":"Interact Points","text":"<ul> <li> EnableInteractPoint</li> <li> GetInteractPoint</li> </ul>"},{"location":"api/mod/functions/#spatial-objects","title":"Spatial Objects","text":"<ul> <li> EnableSpatialObject</li> <li> GetSpatialObject</li> </ul>"},{"location":"api/mod/functions/#object-manipulation","title":"Object Manipulation","text":"<ul> <li> MoveObject</li> <li> MoveObjectOverTime</li> <li> OrbitObjectOverTime</li> <li> RotateObject</li> <li> SetObjectTransform</li> <li> SetObjectTransformOverTime</li> <li> StopActiveMovementForObject</li> <li> UnspawnObject</li> <li> SpawnObject</li> </ul>"},{"location":"api/mod/functions/#object-queries","title":"Object Queries","text":"<ul> <li> GetObjId</li> <li> GetObjectPosition</li> <li> GetObjectRotation</li> <li> GetObjectTransform</li> <li> AllObjectsOfType</li> </ul>"},{"location":"api/mod/functions/#raycasting","title":"Raycasting","text":"<ul> <li> RayCast</li> </ul>"},{"location":"api/mod/functions/#ui-functions","title":"UI Functions","text":""},{"location":"api/mod/functions/#world-icons","title":"World Icons","text":"<ul> <li> AddUIIcon</li> <li> EnableWorldIconImage</li> <li> EnableWorldIconText</li> <li> RemoveUIIcon</li> <li> SetWorldIconColor</li> <li> SetWorldIconImage</li> <li> SetWorldIconOwner</li> <li> SetWorldIconPosition</li> <li> SetWorldIconText</li> <li> GetWorldIcon</li> </ul>"},{"location":"api/mod/functions/#notifications-messages","title":"Notifications &amp; Messages","text":"<ul> <li> ClearAllCustomNotificationMessages</li> <li> ClearCustomNotificationMessage</li> <li> DisplayCustomNotificationMessage</li> <li> DisplayHighlightedWorldLogMessage</li> <li> DisplayNotificationMessage</li> <li> SendErrorReport</li> <li> Message</li> </ul>"},{"location":"api/mod/functions/#scoreboard","title":"Scoreboard","text":"<ul> <li> SetScoreboardColumnNames</li> <li> SetScoreboardColumnWidths</li> <li> SetScoreboardHeader</li> <li> SetScoreboardPlayerValues</li> <li> SetScoreboardSorting</li> <li> SetScoreboardType</li> </ul>"},{"location":"api/mod/functions/#ui-widgets-creation","title":"UI Widgets - Creation","text":"<ul> <li> AddUIButton</li> <li> AddUIContainer</li> <li> AddUIGadgetImage</li> <li> AddUIImage</li> <li> AddUIText</li> <li> AddUIWeaponImage</li> <li> DeleteAllUIWidgets</li> <li> DeleteUIWidget</li> </ul>"},{"location":"api/mod/functions/#ui-widgets-button-properties","title":"UI Widgets - Button Properties","text":"<ul> <li> EnableUIButtonEvent</li> <li> SetUIButtonAlphaBase</li> <li> SetUIButtonAlphaDisabled</li> <li> SetUIButtonAlphaFocused</li> <li> SetUIButtonAlphaHover</li> <li> SetUIButtonAlphaPressed</li> <li> SetUIButtonColorBase</li> <li> SetUIButtonColorDisabled</li> <li> SetUIButtonColorFocused</li> <li> SetUIButtonColorHover</li> <li> SetUIButtonColorPressed</li> <li> SetUIButtonEnabled</li> <li> GetUIButtonAlphaBase</li> <li> GetUIButtonAlphaDisabled</li> <li> GetUIButtonAlphaFocused</li> <li> GetUIButtonAlphaHover</li> <li> GetUIButtonAlphaPressed</li> <li> GetUIButtonColorBase</li> <li> GetUIButtonColorDisabled</li> <li> GetUIButtonColorFocused</li> <li> GetUIButtonColorHover</li> <li> GetUIButtonColorPressed</li> <li> GetUIButtonEnabled</li> </ul>"},{"location":"api/mod/functions/#ui-widgets-image-properties","title":"UI Widgets - Image Properties","text":"<ul> <li> SetUIImageAlpha</li> <li> SetUIImageColor</li> <li> SetUIImageType</li> <li> GetUIImageAlpha</li> <li> GetUIImageColor</li> <li> GetUIImageType</li> </ul>"},{"location":"api/mod/functions/#ui-widgets-text-properties","title":"UI Widgets - Text Properties","text":"<ul> <li> SetUITextAlpha</li> <li> SetUITextAnchor</li> <li> SetUITextColor</li> <li> SetUITextLabel</li> <li> SetUITextSize</li> <li> GetUITextAlpha</li> <li> GetUITextAnchor</li> <li> GetUITextColor</li> <li> GetUITextSize</li> </ul>"},{"location":"api/mod/functions/#ui-widgets-general-properties","title":"UI Widgets - General Properties","text":"<ul> <li> SetUIWidgetAnchor</li> <li> SetUIWidgetBgAlpha</li> <li> SetUIWidgetBgColor</li> <li> SetUIWidgetBgFill</li> <li> SetUIWidgetDepth</li> <li> SetUIWidgetName</li> <li> SetUIWidgetPadding</li> <li> SetUIWidgetParent</li> <li> SetUIWidgetPosition</li> <li> SetUIWidgetSize</li> <li> SetUIWidgetVisible</li> <li> GetUIWidgetAnchor</li> <li> GetUIWidgetBgAlpha</li> <li> GetUIWidgetBgColor</li> <li> GetUIWidgetBgFill</li> <li> GetUIWidgetDepth</li> <li> GetUIWidgetName</li> <li> GetUIWidgetPadding</li> <li> GetUIWidgetParent</li> <li> GetUIWidgetPosition</li> <li> GetUIWidgetSize</li> <li> GetUIWidgetVisible</li> </ul>"},{"location":"api/mod/functions/#ui-widgets-queries","title":"UI Widgets - Queries","text":"<ul> <li> FindUIWidgetWithName</li> <li> GetUIRoot</li> <li> HasUIWidgetWithName</li> </ul>"},{"location":"api/mod/functions/#ui-input","title":"UI Input","text":"<ul> <li> EnableUIInputMode</li> </ul>"},{"location":"api/mod/functions/#vehicle-functions","title":"Vehicle Functions","text":""},{"location":"api/mod/functions/#vehicle-control","title":"Vehicle Control","text":"<ul> <li> ForcePlayerExitVehicle</li> <li> ForcePlayerToSeat</li> <li> SetVehicleMaxHealthMultiplier</li> </ul>"},{"location":"api/mod/functions/#vehicle-queries","title":"Vehicle Queries","text":"<ul> <li> AllVehicles</li> <li> CompareVehicleName</li> <li> GetAllPlayersInVehicle</li> <li> GetPlayerFromVehicleSeat</li> <li> GetPlayerVehicleSeat</li> <li> GetVehicleFromPlayer</li> <li> GetVehicleSeatCount</li> <li> GetVehicleState</li> <li> GetVehicleTeam</li> <li> IsVehicleOccupied</li> <li> IsVehicleSeatOccupied</li> </ul>"},{"location":"api/mod/functions/#waypoints","title":"Waypoints","text":"<ul> <li> GetWaypointPath</li> </ul>"},{"location":"api/mod/functions/#array-functions","title":"Array Functions","text":"<ul> <li> AppendToArray</li> <li> ArraySlice</li> <li> CountOf</li> <li> EmptyArray</li> <li> FirstOf</li> <li> LastOf</li> <li> RandomValueInArray</li> <li> RandomizedArray</li> <li> SortedArray</li> <li> ValueInArray</li> </ul>"},{"location":"api/mod/functions/#logic-comparison","title":"Logic &amp; Comparison","text":"<ul> <li> And</li> <li> Equals</li> <li> GreaterThan</li> <li> GreaterThanEqualTo</li> <li> IfThenElse</li> <li> IsType</li> <li> LessThan</li> <li> LessThanEqualTo</li> <li> Not</li> <li> NotEqualTo</li> <li> Or</li> <li> Xor</li> </ul>"},{"location":"api/mod/functions/#string-functions","title":"String Functions","text":"<ul> <li> Concat</li> </ul>"},{"location":"api/mod/functions/#math-functions","title":"Math Functions","text":""},{"location":"api/mod/functions/#basic-math","title":"Basic Math","text":"<ul> <li> AbsoluteValue</li> <li> Add</li> <li> Ceiling</li> <li> Divide</li> <li> Floor</li> <li> Max</li> <li> Modulo</li> <li> Multiply</li> <li> RaiseToPower</li> <li> RoundToInteger</li> <li> SquareRoot</li> <li> Subtract</li> </ul>"},{"location":"api/mod/functions/#trigonometry","title":"Trigonometry","text":"<ul> <li> ArccosineInDegrees</li> <li> ArccosineInRadians</li> <li> ArcsineInDegrees</li> <li> ArcsineInRadians</li> <li> ArctangentInDegrees</li> <li> ArctangentInRadians</li> <li> CosineFromDegrees</li> <li> CosineFromRadians</li> <li> SineFromDegrees</li> <li> SineFromRadians</li> <li> TangentFromDegrees</li> <li> TangentFromRadians</li> <li> DegreesToRadians</li> <li> RadiansToDegrees</li> <li> Pi</li> </ul>"},{"location":"api/mod/functions/#random","title":"Random","text":"<ul> <li> RandomReal</li> </ul>"},{"location":"api/mod/functions/#vector-transform-functions","title":"Vector &amp; Transform Functions","text":""},{"location":"api/mod/functions/#vector-creation","title":"Vector Creation","text":"<ul> <li> CreateVector</li> </ul>"},{"location":"api/mod/functions/#vector-math","title":"Vector Math","text":"<ul> <li> AngleBetweenVectors</li> <li> AngleDifference</li> <li> CrossProduct</li> <li> DirectionFromAngles</li> <li> DirectionTowards</li> <li> DistanceBetween</li> <li> DotProduct</li> <li> Normalize</li> <li> VectorTowards</li> </ul>"},{"location":"api/mod/functions/#vector-components","title":"Vector Components","text":"<ul> <li> XComponentOf</li> <li> YComponentOf</li> <li> ZComponentOf</li> </ul>"},{"location":"api/mod/functions/#direction-vectors","title":"Direction Vectors","text":"<ul> <li> BackwardVector</li> <li> DownVector</li> <li> ForwardVector</li> <li> LeftVector</li> <li> RightVector</li> <li> UpVector</li> </ul>"},{"location":"api/mod/functions/#coordinate-transforms","title":"Coordinate Transforms","text":"<ul> <li> LocalPositionOf</li> <li> LocalVectorOf</li> <li> WorldPositionOf</li> <li> WorldVectorOf</li> </ul>"},{"location":"api/mod/functions/#transform","title":"Transform","text":"<ul> <li> CreateTransform</li> </ul>"},{"location":"api/mod/functions/AIBattlefieldBehavior/","title":"AIBattlefieldBehavior","text":"<p>Sets a player to act independently. They will attempt to complete objectives, fire on enemy players, and engage in autonomous battlefield behavior. This function only works for AI players.</p>"},{"location":"api/mod/functions/AIBattlefieldBehavior/#syntax","title":"Syntax","text":"<pre><code>export function AIBattlefieldBehavior(player: Player): void;\n</code></pre>"},{"location":"api/mod/functions/AIBattlefieldBehavior/#parameters","title":"Parameters","text":"Parameter Type Description player <code>mod.Player</code> The AI player to set to battlefield behavior mode."},{"location":"api/mod/functions/AIBattlefieldBehavior/#example","title":"Example","text":"<pre><code>// Spawn AI soldiers when the game mode starts\nexport async function OnGameModeStarted() {\n  // Spawn AI with specific class and team\n  mod.SpawnAIFromAISpawner(\n    mod.GetSpawner(801), // Obj Id set in Godot\n    mod.SoldierClass.Assault,\n    mod.GetTeam(2)\n  );\n}\n\n// Set AI to battlefield behavior when they deploy\nexport function OnPlayerDeployed(eventPlayer: mod.Player) {\n  const isAiSoldier = mod.GetSoldierState(eventPlayer, mod.SoldierStateBool.IsAISoldier);\n  if (isAiSoldier) {\n    // AI will now autonomously complete objectives and engage enemies\n    mod.AIBattlefieldBehavior(eventPlayer);\n  }\n}\n</code></pre>"},{"location":"api/mod/functions/AIBattlefieldBehavior/#see-also","title":"See Also","text":"<ul> <li><code>SpawnAIFromAISpawner</code></li> <li><code>OnPlayerDeployed</code></li> <li><code>OnGameModeStarted</code></li> <li><code>GetSoldierState</code></li> </ul>"},{"location":"api/mod/functions/EnableAreaTrigger/","title":"EnableAreaTrigger","text":"<p>Enables or disables an <code>AreaTrigger</code>. Area triggers must be enabled before events such as <code>OnPlayerEnterAreaTrigger</code> are fired.</p>"},{"location":"api/mod/functions/EnableAreaTrigger/#syntax","title":"Syntax","text":"<pre><code>export function EnableAreaTrigger(areaTrigger: AreaTrigger, enable: boolean): void;\n</code></pre>"},{"location":"api/mod/functions/EnableAreaTrigger/#parameters","title":"Parameters","text":"Parameter Type Description <code>areaTrigger</code> <code>mod.AreaTrigger</code> The area trigger entity that is being modifed. <code>enable</code> <code>boolean</code> <code>true</code> enables the area trigger and <code>false</code> disables it."},{"location":"api/mod/functions/EnableAreaTrigger/#example","title":"Example","text":"<pre><code>// Enable a trigger area\nexport async function OnGameModeStarted() {\n  console.log(\"Game mode started\")\n  const areaTrigger = mod.GetAreaTrigger(500);\n  mod.EnableAreaTrigger(areaTrigger, true);\n}\n</code></pre>"},{"location":"api/mod/functions/EnableAreaTrigger/#see-also","title":"See Also","text":"<ul> <li><code>AreaTrigger</code></li> </ul>"},{"location":"api/mod/functions/EnableWorldIconImage/","title":"EnableWorldIconImage","text":"<p>Enables or disables the visibility of a world icon's image.</p>"},{"location":"api/mod/functions/EnableWorldIconImage/#syntax","title":"Syntax","text":"<pre><code>export function EnableWorldIconImage(worldIcon: WorldIcon, enableImage: boolean): void;\n</code></pre>"},{"location":"api/mod/functions/EnableWorldIconImage/#parameters","title":"Parameters","text":"Parameter Type Description <code>worldIcon</code> <code>WorldIcon</code> The world icon object whose image visibility to control. <code>enableImage</code> <code>boolean</code> <code>true</code> to show the icon image, <code>false</code> to hide it."},{"location":"api/mod/functions/EnableWorldIconImage/#example","title":"Example","text":"<pre><code>export async function OnGameModeStarted() {\n  console.log(\"Game mode started\")\n  const pos = mod.CreateVector(341, 85, -202);\n  const icon = mod.SpawnObject(mod.RuntimeSpawn_Common.WorldIcon, pos, mod.CreateVector(0, 0, 0));\n  mod.SetWorldIconImage(icon, mod.WorldIconImages.Skull);\n  mod.SetWorldIconColor(icon, mod.CreateVector(1, 1, 1));\n  mod.SetWorldIconText(icon, mod.Message(mod.stringkeys.icon_text));\n\n  // Enable icon image and text to show them in the world\n  mod.EnableWorldIconImage(icon, true);\n  mod.EnableWorldIconText(icon, true);\n  console.log(mod.GetObjId(icon));\n}\n</code></pre>"},{"location":"api/mod/functions/EndGameMode/","title":"EndGameMode","text":"<p>Ends the current game with a winning team or player.</p>"},{"location":"api/mod/functions/EndGameMode/#syntax","title":"Syntax","text":"<pre><code>export function EndGameMode(player: Player): void; // Winning player\nexport function EndGameMode(team: Team): void; // Winning team\nexport function EndGameMode(0): void; // Draw - no winner\n</code></pre>"},{"location":"api/mod/functions/EndGameMode/#parameters","title":"Parameters","text":"Parameter Type Description <code>player</code> or <code>team</code> or <code>0</code> <code>Player\\|Team\\</code> Team or player that is the winner"},{"location":"api/mod/functions/EndGameMode/#example","title":"Example","text":"<pre><code>export async function OnGameModeStarted() {\n  console.log(\"Game mode started\")\n  const areaTrigger = mod.GetAreaTrigger(500);\n  mod.EnableAreaTrigger(areaTrigger, true);\n}\n\n// End the game. The player taht entered the area trigger is the winner.\nexport async function OnPlayerEnterAreaTrigger(eventPlayer: mod.Player, eventAreaTrigger: mod.AreaTrigger) {\n  if (mod.GetObjId(eventAreaTrigger) == 500) {\n    console.log(\"Ending game mode\");\n    mod.EndGameMode(eventPlayer);\n  }\n}\n\nexport async function OnGameModeEnding() {\n  console.log(\"Game has ended\");\n  const msg = mod.Message(mod.stringkeys.game_over);\n  mod.DisplayNotificationMessage(msg);\n}\n</code></pre>"},{"location":"api/mod/functions/EndGameMode/#see-also","title":"See Also","text":"<ul> <li><code>OnGameModeEnding</code></li> </ul>"},{"location":"api/mod/functions/GetAreaTrigger/","title":"GetAreaTrigger","text":"<p>Gets the <code>AreaTrigger</code> by <code>id</code>.</p>"},{"location":"api/mod/functions/GetAreaTrigger/#syntax","title":"Syntax","text":"<pre><code>export function GetAreaTrigger(areaTriggerNumber: number): AreaTrigger;\n</code></pre>"},{"location":"api/mod/functions/GetAreaTrigger/#parameters","title":"Parameters","text":"Parameter Type Description <code>areaTriggerNumber</code> <code>number</code> Number ID of the area trigger to get."},{"location":"api/mod/functions/GetAreaTrigger/#example","title":"Example","text":"<pre><code>// Enable a trigger area\nexport async function OnGameModeStarted() {\n  console.log(\"Game mode started\")\n  const areaTrigger = mod.GetAreaTrigger(500); // ID as defined in the Godot level editor\n  mod.EnableAreaTrigger(areaTrigger, true);\n}\n</code></pre>"},{"location":"api/mod/functions/GetAreaTrigger/#see-also","title":"See Also","text":"<ul> <li><code>AreaTrigger</code></li> </ul>"},{"location":"api/mod/functions/GetObjId/","title":"GetObjId","text":"<p>Gets the ID of an object.</p>"},{"location":"api/mod/functions/GetObjId/#syntax","title":"Syntax","text":"<pre><code>export function GetObjId(modBuilderObject: mod.Object): number;\n</code></pre>"},{"location":"api/mod/functions/GetObjId/#parameters","title":"Parameters","text":"Parameter Type Description <code>modBuilderObject</code> <code>mod.Object</code> Game object to get the ID"},{"location":"api/mod/functions/GetObjId/#return-values","title":"Return Values","text":"Type Description <code>number</code> Object ID"},{"location":"api/mod/functions/GetObjId/#example","title":"Example","text":"<pre><code>export async function OnGameModeStarted() {\n  const pos = mod.CreateVector(341, 80, -202);\n  const icon = mod.SpawnObject(mod.RuntimeSpawn_Common.WorldIcon, pos, mod.CreateVector(0, 0, 0));\n  mod.SetWorldIconImage(icon, mod.WorldIconImages.Skull);\n  mod.SetWorldIconColor(icon, mod.CreateVector(1, 1, 1));\n  mod.EnableWorldIconImage(icon, true);\n\n  // Get the ID of the icon object\n  const objId = mod.GetObjId(icon);\n  console.log(objId);\n}\n</code></pre>"},{"location":"api/mod/functions/GetTeam/","title":"GetTeam","text":"<p>Returns the team value of the specified player or the corresponding team of the provided number. This function allows you to retrieve team information either by passing a player object or by using a team ID number.</p>"},{"location":"api/mod/functions/GetTeam/#syntax","title":"Syntax","text":"<pre><code>export function GetTeam(player: Player): Team;\nexport function GetTeam(teamId: number): Team;\n</code></pre>"},{"location":"api/mod/functions/GetTeam/#parameters","title":"Parameters","text":"Parameter Type Description <code>player</code> <code>mod.Player</code> The player object to retrieve the team from <code>teamId</code> <code>number</code> The team ID number to retrieve the team object for"},{"location":"api/mod/functions/GetTeam/#return-values","title":"Return Values","text":"Type Description <code>mod.Team</code> The team object corresponding to the player or team ID"},{"location":"api/mod/functions/GetTeam/#example","title":"Example","text":"<pre><code>// Get team from a player\nexport async function OnPlayerJoinGame(eventPlayer: mod.Player) {\n  const playerTeam = mod.GetTeam(eventPlayer);\n  console.log(\"Player joined team:\", playerTeam);\n}\n\n// Get team from a team ID\nexport async function OnPlayerJoinGame(eventPlayer: mod.Player) {\n  console.log(\"Player joined the game\");\n  const teamId = mod.GetTeam(2)\n  mod.SetTeam(eventPlayer, teamId);\n}\n</code></pre>"},{"location":"api/mod/functions/GetTeam/#see-also","title":"See Also","text":"<ul> <li><code>SetTeam</code></li> </ul>"},{"location":"api/mod/functions/SetTeam/","title":"SetTeam","text":"<p>This function changes the team assignment of a specified player. This is useful for dynamically balancing teams, creating custom team-switching mechanics, or implementing game modes that require players to change teams during gameplay.</p>"},{"location":"api/mod/functions/SetTeam/#syntax","title":"Syntax","text":"<pre><code>export function SetTeam(player: Player, team: Team): void;\n</code></pre>"},{"location":"api/mod/functions/SetTeam/#parameters","title":"Parameters","text":"Parameter Type Description player <code>mod.Player</code> The player whose team will be changed team <code>mod.Team</code> The team to assign the player to"},{"location":"api/mod/functions/SetTeam/#example","title":"Example","text":"<pre><code>export async function OnPlayerJoinGame(eventPlayer: mod.Player) {\n  console.log(\"Player joined the game\");\n  mod.SetTeam(eventPlayer, mod.GetTeam(2));\n}\n</code></pre>"},{"location":"api/mod/functions/SetTeam/#see-also","title":"See Also","text":"<ul> <li><code>GetTeam</code></li> <li><code>GetSquad</code></li> <li><code>SetHQTeam</code></li> </ul>"},{"location":"api/mod/functions/SetUIWidgetVisible/","title":"SetUIWidgetVisible","text":"<p>This function determines whether a UI Widget is visible or not. Use this to show or hide UI elements dynamically during gameplay. ui_builder is a tool that can be used to design UIs visually.</p>"},{"location":"api/mod/functions/SetUIWidgetVisible/#syntax","title":"Syntax","text":"<pre><code>export function SetUIWidgetVisible(widget: UIWidget, visible: boolean): void;\n</code></pre>"},{"location":"api/mod/functions/SetUIWidgetVisible/#parameters","title":"Parameters","text":"Parameter Type Description widget <code>mod.UIWidget</code> The UI widget to show or hide visible <code>boolean</code> Whether the widget should be visible (true) or hidden (false)"},{"location":"api/mod/functions/SetUIWidgetVisible/#example","title":"Example","text":"Script.tsStrings.json <pre><code>import * as modlib from 'modlib';\n\nexport function OnPlayerDeployed(eventPlayer: mod.Player) {\n\n  const containerPc2x1Widget = modlib.ParseUI(\n    {\n      name: \"Container_PC2X1\",\n      type: \"Container\",\n      position: [0, 46.88],\n      size: [559.74, 69.66],\n      anchor: mod.UIAnchor.TopCenter,\n      visible: true,\n      padding: 0,\n      bgColor: [0.0314, 0.0431, 0.0431],\n      bgAlpha: 0.5,\n      bgFill: mod.UIBgFill.Blur,\n      children: [\n        {\n          name: \"Hello World\",\n          type: \"Text\",\n          position: [0, 0],\n          size: [273.91, 57.56],\n          anchor: mod.UIAnchor.Center,\n          visible: true,\n          padding: 0,\n          bgColor: [0.2, 0.2, 0.2],\n          bgAlpha: 1,\n          bgFill: mod.UIBgFill.None,\n          textLabel: mod.stringkeys.Hello_World,\n          textColor: [1, 1, 1],\n          textAlpha: 1,\n          textSize: 24,\n          textAnchor: mod.UIAnchor.Center\n        }\n      ]\n    }\n  ) as mod.UIWidget;\n\n  mod.SetUIWidgetVisible(containerPc2x1Widget, true);\n}\n</code></pre> <pre><code>{\n  \"Hello_World\": \"Hello, world\"\n}\n</code></pre>"},{"location":"api/mod/functions/SetUIWidgetVisible/#see-also","title":"See Also","text":"<ul> <li><code>AddUIContainer</code></li> <li><code>AddUIButton</code></li> <li><code>ParseUI</code></li> </ul>"},{"location":"api/mod/functions/SpawnAIFromAISpawner/","title":"SpawnAIFromAISpawner","text":"<p>Spawns one AI soldier from a specific AI Spawner. This function supports multiple overloads, allowing you to customize the spawned AI with different parameters such as soldier class, custom name, and team assignment.</p>"},{"location":"api/mod/functions/SpawnAIFromAISpawner/#syntax","title":"Syntax","text":"<pre><code>export function SpawnAIFromAISpawner(spawner: Spawner): void;\nexport function SpawnAIFromAISpawner(spawner: Spawner, classToSpawn: SoldierClass): void;\nexport function SpawnAIFromAISpawner(spawner: Spawner, name: Message): void;\nexport function SpawnAIFromAISpawner(spawner: Spawner, team: Team): void;\nexport function SpawnAIFromAISpawner(spawner: Spawner, classToSpawn: SoldierClass, name: Message): void;\nexport function SpawnAIFromAISpawner(spawner: Spawner, classToSpawn: SoldierClass, team: Team): void;\nexport function SpawnAIFromAISpawner(spawner: Spawner, name: Message, team: Team): void;\nexport function SpawnAIFromAISpawner(spawner: Spawner, classToSpawn: SoldierClass, name: Message, team: Team): void;\n</code></pre>"},{"location":"api/mod/functions/SpawnAIFromAISpawner/#parameters","title":"Parameters","text":"Parameter Type Description spawner <code>mod.Spawner</code> The AI Spawner object from which to spawn the AI soldier. classToSpawn <code>mod.SoldierClass</code> (Optional) The soldier class for the spawned AI (e.g., Assault, Support, Medic). name <code>mod.Message</code> (Optional) A custom message/name for the spawned AI soldier. team <code>mod.Team</code> (Optional) The team to assign the spawned AI soldier to."},{"location":"api/mod/functions/SpawnAIFromAISpawner/#example","title":"Example","text":"<pre><code>export async function OnGameModeStarted() {\n  // Spawn AI with specific class and team\n  mod.SpawnAIFromAISpawner(\n    mod.GetSpawner(801), // Obj Id set in Godot\n    mod.SoldierClass.Assault,\n    mod.GetTeam(2)\n  );\n}\n</code></pre>"},{"location":"api/mod/functions/SpawnAIFromAISpawner/#see-also","title":"See Also","text":"<ul> <li><code>UnspawnAllAIsFromAISpawner</code></li> <li><code>AIEnableShooting</code></li> <li><code>AIEnableTargeting</code></li> </ul>"},{"location":"api/mod/functions/SpawnObject/","title":"SpawnObject","text":"<p>Spawns an object in the game.</p>"},{"location":"api/mod/functions/SpawnObject/#syntax","title":"Syntax","text":"<pre><code>export function SpawnObject(\n        prefabEnum:\n            | RuntimeSpawn_Common\n            | RuntimeSpawn_Abbasid\n            | RuntimeSpawn_Aftermath\n            | RuntimeSpawn_Battery\n            | RuntimeSpawn_Capstone\n            | RuntimeSpawn_Dumbo\n            | RuntimeSpawn_FireStorm\n            | RuntimeSpawn_Limestone\n            | RuntimeSpawn_Outskirts\n            | RuntimeSpawn_Tungsten,\n        position: Vector,\n        rotation: Vector\n    ): Any;\n</code></pre>"},{"location":"api/mod/functions/SpawnObject/#parameters","title":"Parameters","text":"Parameter Type Description <code>prefabEnum</code> <code>mod.RuntimeSpawn_*</code> The object to spawn from  <code>mod.RuntimeSpawn_*</code> <code>position</code> <code>mod.Vector</code> Position on the map to place the object <code>rotation</code> <code>mod.Vector</code> Rotation vector <code>scale</code> <code>mod.Vector</code> Scale vector"},{"location":"api/mod/functions/SpawnObject/#example","title":"Example","text":"<p>A simple example that spawns a world icon object.</p> <pre><code>export async function OnGameModeStarted() {\n  console.log(\"Game mode started\");\n\n  // Coordinates to place the object\n  const pos = mod.CreateVector(341, 80, -202);\n\n  // Spawn the icon\n  const icon = mod.SpawnObject(mod.RuntimeSpawn_Common.WorldIcon, pos, mod.CreateVector(0, 0, 0));\n\n  // Set the icon appearance\n  mod.SetWorldIconImage(icon, mod.WorldIconImages.Skull);\n  mod.SetWorldIconColor(icon, mod.CreateVector(1, 1, 1));\n  mod.EnableWorldIconImage(icon, true);\n}\n</code></pre>"},{"location":"api/mod/functions/Teleport/","title":"Teleport","text":"<p>Teleports a player or vehicle to a specified position in the world, facing a particular direction. This function is useful for moving entities to custom spawn points, creating teleport zones, or repositioning players/vehicles during gameplay.</p>"},{"location":"api/mod/functions/Teleport/#syntax","title":"Syntax","text":"<pre><code>export function Teleport(player: Player, destination: Vector, orientation: number): void;\nexport function Teleport(vehicle: Vehicle, destination: Vector, orientation: number): void;\n</code></pre>"},{"location":"api/mod/functions/Teleport/#parameters","title":"Parameters","text":"Parameter Type Description <code>player</code> / <code>vehicle</code> <code>mod.Player</code> / <code>mod.Vehicle</code> The player or vehicle to teleport <code>destination</code> <code>mod.Vector</code> The target position in world space coordinates <code>orientation</code> <code>number</code> The direction the entity should face after teleporting, in radians"},{"location":"api/mod/functions/Teleport/#example","title":"Example","text":"<pre><code>type Vector3 = { x: number; y: number; z: number };\n\nconst spawnPoints: Record&lt;number, Vector3&gt; = {\n  1: { x: 260, y: 88, z: -214 }\n};\n\nfunction sendPlayerToSpawnpoint(player: mod.Player, id: number) {\n  const sp = spawnPoints[id];\n  const pos = mod.CreateVector(sp.x, sp.y, sp.z);\n  mod.Teleport(player, pos, 0);\n}\n\nexport async function OnPlayerDeployed(eventPlayer: mod.Player) {\n  sendPlayerToSpawnpoint(eventPlayer, 1);\n}\n</code></pre>"},{"location":"api/mod/functions/Teleport/#see-also","title":"See Also","text":"<ul> <li><code>CreateVector</code></li> <li><code>DeployPlayer</code></li> <li><code>SpawnPlayerFromSpawnPoint</code></li> <li><code>WorldPositionOf</code></li> <li><code>OnPlayerDeployed</code></li> </ul>"},{"location":"api/mod/functions/Wait/","title":"Wait","text":"<p>The <code>Wait</code> function suspends the execution of the current async function for the specified number of seconds. This is useful for creating delays between actions, implementing cooldowns, or scheduling periodic tasks.</p>"},{"location":"api/mod/functions/Wait/#syntax","title":"Syntax","text":"<pre><code>export function Wait(n: number): Promise&lt;void&gt;;\n</code></pre>"},{"location":"api/mod/functions/Wait/#parameters","title":"Parameters","text":"<ul> <li><code>n</code> (number): The duration to wait in seconds. Can be a decimal value for sub-second precision (e.g., <code>0.5</code> for 500 milliseconds).</li> </ul>"},{"location":"api/mod/functions/Wait/#returns","title":"Returns","text":"<p>A <code>Promise&lt;void&gt;</code> that resolves after the specified duration has elapsed.</p>"},{"location":"api/mod/functions/Wait/#example","title":"Example","text":"<pre><code>// Wait for 5 seconds before continuing\nawait mod.Wait(5);\n</code></pre>"},{"location":"api/mod/functions/Wait/#common-mistakes","title":"Common Mistakes","text":"<ul> <li> <p>Missing <code>await</code>: Forgetting to use <code>await</code> will cause the function to continue immediately without waiting   <pre><code>// \u274c Incorrect - won't actually wait\nmod.Wait(5);\n\n// \u2705 Correct - properly waits\nawait mod.Wait(5);\n</code></pre></p> </li> <li> <p>Using in non-async functions: The <code>Wait</code> function can only be used within async functions   <pre><code>// \u274c Won't work\nfunction RegularFunction() {\n  await mod.Wait(5); // Error: await can only be used in async functions\n}\n\n// \u2705 Correct\nasync function AsyncFunction() {\n  await mod.Wait(5);\n}\n</code></pre></p> </li> </ul>"},{"location":"api/mod/types/","title":"Types","text":"<p>Work in Progress</p> <p>This documentation is a work in progress. Contributions are encouraged. Only pages with a checkmark are complete.</p>"},{"location":"api/mod/types/#core-types","title":"Core Types","text":"<ul> <li> Any</li> <li> Array</li> <li> Object</li> <li> Variable</li> </ul>"},{"location":"api/mod/types/#players-teams","title":"Players &amp; Teams","text":"<ul> <li> Player</li> <li> Team</li> <li> Squad</li> <li> SoldierKits</li> </ul>"},{"location":"api/mod/types/#spawning","title":"Spawning","text":"<ul> <li> SpawnPoint</li> <li> Spawner</li> <li> VehicleSpawner</li> <li> EmplacementSpawner</li> </ul>"},{"location":"api/mod/types/#objectives-game-modes","title":"Objectives &amp; Game Modes","text":"<ul> <li> CapturePoint</li> <li> MCOM</li> <li> Sector</li> <li> HQ</li> </ul>"},{"location":"api/mod/types/#spatial-movement","title":"Spatial &amp; Movement","text":"<ul> <li> Transform</li> <li> Vector</li> <li> SpatialObject</li> <li> WaypointPath</li> <li> PortalEnum</li> </ul>"},{"location":"api/mod/types/#triggers-interaction","title":"Triggers &amp; Interaction","text":"<ul> <li> AreaTrigger</li> <li> InteractPoint</li> </ul>"},{"location":"api/mod/types/#vehicles-weapons","title":"Vehicles &amp; Weapons","text":"<ul> <li> Vehicle</li> <li> WeaponPackage</li> <li> WeaponUnlock</li> </ul>"},{"location":"api/mod/types/#effects-feedback","title":"Effects &amp; Feedback","text":"<ul> <li> VFX</li> <li> SFX</li> <li> ScreenEffect</li> <li> VO</li> </ul>"},{"location":"api/mod/types/#ui-hud","title":"UI &amp; HUD","text":"<ul> <li> UIWidget</li> <li> WorldIcon</li> <li> Message</li> </ul>"},{"location":"api/mod/types/#combat","title":"Combat","text":"<ul> <li> DamageType</li> <li> DeathType</li> </ul>"},{"location":"api/modlib/","title":"Modlib","text":"<p><code>modlib</code> is a library of helper functions and utilities.</p>"},{"location":"api/modlib/#usage","title":"Usage","text":"<p>Include the following import statement at the top of your script.</p> <pre><code>import * as modlib from 'modlib';\n</code></pre>"},{"location":"api/modlib/#functions","title":"Functions","text":"<ul> <li><code>ParseUI</code></li> </ul>"},{"location":"api/modlib/ParseUI/","title":"ParseUI","text":"<p>This function creates and configures UI widgets from a parameters object. It iterates through the provided parameters and creates UI widgets, returning the last created widget. This allows the UI to be declared using nested objects. ui_builder is a tool that can be used to design UIs visually.</p>"},{"location":"api/modlib/ParseUI/#syntax","title":"Syntax","text":"<pre><code>export function ParseUI(...params: any[]): mod.UIWidget | undefined;\n</code></pre>"},{"location":"api/modlib/ParseUI/#parameters","title":"Parameters","text":"Parameter Type Description <code>params</code> <code>any[]</code> Variable number of UI widget configuration objects"},{"location":"api/modlib/ParseUI/#return-values","title":"Return Values","text":"Type Description <code>mod.UIWidget | undefined</code> The last UI widget created from the parameters, or undefined if no parameters provided"},{"location":"api/modlib/ParseUI/#example","title":"Example","text":"Script.tsStrings.json <pre><code>import * as modlib from 'modlib';\n\nexport function OnPlayerDeployed(eventPlayer: mod.Player) {\n\n  const containerPc2x1Widget = modlib.ParseUI(\n    {\n      name: \"Container_PC2X1\",\n      type: \"Container\",\n      position: [0, 46.88],\n      size: [559.74, 69.66],\n      anchor: mod.UIAnchor.TopCenter,\n      visible: true,\n      padding: 0,\n      bgColor: [0.0314, 0.0431, 0.0431],\n      bgAlpha: 0.5,\n      bgFill: mod.UIBgFill.Blur,\n      children: [\n        {\n          name: \"Hello World\",\n          type: \"Text\",\n          position: [0, 0],\n          size: [273.91, 57.56],\n          anchor: mod.UIAnchor.Center,\n          visible: true,\n          padding: 0,\n          bgColor: [0.2, 0.2, 0.2],\n          bgAlpha: 1,\n          bgFill: mod.UIBgFill.None,\n          textLabel: mod.stringkeys.Hello_World,\n          textColor: [1, 1, 1],\n          textAlpha: 1,\n          textSize: 24,\n          textAnchor: mod.UIAnchor.Center\n        }\n      ]\n    }\n  ) as mod.UIWidget;\n\n  mod.SetUIWidgetVisible(containerPc2x1Widget, true);\n}\n</code></pre> <pre><code>{\n  \"Hello_World\": \"Hello, world\"\n}\n</code></pre>"},{"location":"api/modlib/ParseUI/#see-also","title":"See Also","text":"<ul> <li><code>AddUIContainer</code></li> <li><code>AddUIButton</code></li> <li><code>SetUIWidgetVisible</code></li> </ul>"}]}